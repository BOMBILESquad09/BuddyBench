package it.polito.mad.buddybench.views

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.ViewGroup.LayoutParams
import android.view.ViewGroup.MarginLayoutParams
import android.widget.TextView
import androidx.cardview.widget.CardView
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.google.android.material.bottomsheet.BottomSheetDialog
import dagger.hilt.android.AndroidEntryPoint
import it.polito.mad.buddybench.R
import it.polito.mad.buddybench.databinding.FragmentCourtBinding
import it.polito.mad.buddybench.entities.Court
import it.polito.mad.buddybench.utils.Utils
import it.polito.mad.buddybench.viewmodels.CourtViewModel
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter


/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */

@AndroidEntryPoint
class CourtFragment : Fragment() {

    // ** NB: Autogenerated binding class containing all the elements of the .xml file
    // with an id. Example: binding.court_name_tv
    private var _binding: FragmentCourtBinding? = null

    // ** This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    // ** Court LiveData by ViewModel
    private val viewModel by viewModels<CourtViewModel>()


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        _binding = FragmentCourtBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // ** View Model
        viewModel.getMockCourt().observe(viewLifecycleOwner) {
            updateView(it)
        }

        // ** DateTime Pickers
        viewModel.selectedDay.observe(viewLifecycleOwner) { selected ->
            binding.daysScrollView.removeAllViews()
            viewModel.days.map { renderDayItem(it, selected) }
        }

        viewModel.selectedTime.observe(viewLifecycleOwner) { selected ->
            binding.timeScrollView.removeAllViews()
            viewModel.timeSlots.map { renderTimeItem(it, selected) }
        }

        // ** Navigate to court reservation
        binding.buttonFirst.setOnClickListener {
            // findNavController().navigate(R.id.action_FirstFragment_to_SecondFragment)
            showBottomSheetDialog()
        }
    }

    private fun updateView(court: Court) {
        binding.courtNameTv.text = court.name
        binding.courtAddressTv.text = court.address
        binding.courtFeeTv.text = getString(R.string.court_fee, court.feeHour.toString())
    }

    private fun renderDayItem(day: LocalDate, selected: LocalDate) {
        val dayScrollItem = layoutInflater.inflate(R.layout.datepicker_scroll_item, binding.daysScrollView, false)
        val dayTv: TextView = dayScrollItem.findViewById(R.id.day_tv)
        val dayOfMonthTv: TextView = dayScrollItem.findViewById(R.id.day_of_month_tv)
        val monthTv: TextView = dayScrollItem.findViewById(R.id.month_tv)

        dayTv.text = Utils.capitalize(day.dayOfWeek.name.subSequence(0,3).toString())
        dayOfMonthTv.text = day.dayOfMonth.toString()
        monthTv.text = Utils.capitalize(day.month.name.subSequence(0, 3).toString())

        // ** Selected day
        if (day == selected) {
            val primaryColor = ContextCompat.getColor(requireContext(), R.color.md_theme_light_primary)
            val whiteColor = ContextCompat.getColor(requireContext(), R.color.md_theme_light_background)
            dayOfMonthTv.background.setTint(primaryColor)
            dayOfMonthTv.setTextColor(whiteColor)
        }

        // ** Last item no margin at the end
        if (day == viewModel.days.last()) {
            val noMarginParams = MarginLayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
            noMarginParams.marginEnd = 0
            dayScrollItem.layoutParams = noMarginParams
        }

        // ** OnClick Listener
        dayScrollItem.setOnClickListener { viewModel.selectDay(day) }

        binding.daysScrollView.addView(dayScrollItem)
    }


    private fun renderTimeItem(time: LocalTime, selected: LocalTime) {
        val timeScrollItem = layoutInflater.inflate(R.layout.datepicker_time_scroll_item, binding.timeScrollView, false)
        val timeSlotCard: CardView = timeScrollItem.findViewById(R.id.time_slot_card)
        val timeSlotTv: TextView = timeScrollItem.findViewById(R.id.time_slot_tv)

        // ** Text is (time --- time + 1)
        val timeSlotText = time.format(DateTimeFormatter.ofPattern("HH:mm")) + " - " + time.plusHours(1).format(
            DateTimeFormatter.ofPattern("HH:mm"))
        timeSlotTv.text = timeSlotText

        // ** Selected time
        if (time == selected) {
            val primaryColor = ContextCompat.getColor(requireContext(), R.color.md_theme_light_primary)
            val whiteColor = ContextCompat.getColor(requireContext(), R.color.md_theme_light_background)
            timeSlotCard.background.setTint(primaryColor)
            timeSlotTv.setTextColor(whiteColor)
        }

        // ** Last item no margin at the end
        if (time == viewModel.timeSlots.last()) {
            val noMarginParams = MarginLayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
            noMarginParams.marginEnd = 0
            timeScrollItem.layoutParams = noMarginParams
        }

        // ** OnClick Listener
        timeSlotCard.setOnClickListener { viewModel.selectTime(time) }

        binding.timeScrollView.addView(timeScrollItem)
    }

    private fun showBottomSheetDialog() {
        val bottomSheetDialog = BottomSheetDialog(requireContext())
        bottomSheetDialog.setContentView(R.layout.bottom_sheet_dialog_court_confirm)
        bottomSheetDialog.show()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}