package it.polito.mad.buddybench.views

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.compose.ui.text.capitalize
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import it.polito.mad.buddybench.R
import it.polito.mad.buddybench.databinding.FragmentCourtBinding
import it.polito.mad.buddybench.entities.Court
import it.polito.mad.buddybench.utils.Utils
import it.polito.mad.buddybench.viewmodels.CourtViewModel
import java.time.LocalDate

/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */
class CourtFragment : Fragment() {

    // ** NB: Autogenerated binding class containing all the elements of the .xml file
    // with an id. Example: binding.court_name_tv
    private var _binding: FragmentCourtBinding? = null

    // ** This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    // ** Court LiveData by ViewModel
    private val viewModel by viewModels<CourtViewModel>()


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        _binding = FragmentCourtBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // ** View Model
        viewModel.getMockCourt().observe(viewLifecycleOwner) {
            updateView(it)
        }

        // ** DateTime Pickers
        binding.daysScrollView.removeAllViews()
        viewModel.days.map { renderDayItem(it) }

        // ** Navigate to court reservation
        binding.buttonFirst.setOnClickListener {
            findNavController().navigate(R.id.action_FirstFragment_to_SecondFragment)
        }
    }

    private fun updateView(court: Court) {
        binding.courtNameTv.text = court.courtName
        binding.courtAddressTv.text = court.address
        binding.courtFeeTv.text = getString(R.string.court_fee, court.feeHour.toString())

        /**
         * TODO:
         * - Opening Hours
         * - Days/Hours Availability
         */
    }

    private fun renderDayItem(day: LocalDate) {

        val dayScrollItem = layoutInflater.inflate(R.layout.datepicker_scroll_item, binding.daysScrollView, false)
        val dayTv: TextView = dayScrollItem.findViewById(R.id.day_tv)
        val dayOfMonthTv: TextView = dayScrollItem.findViewById(R.id.day_of_month_tv)
        val monthTv: TextView = dayScrollItem.findViewById(R.id.month_tv)

        dayTv.text = Utils.capitalize(day.dayOfWeek.name.subSequence(0,3).toString())
        dayOfMonthTv.text = day.dayOfMonth.toString()
        monthTv.text = Utils.capitalize(day.month.name.subSequence(0, 3).toString())

        binding.daysScrollView.addView(dayScrollItem)
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}