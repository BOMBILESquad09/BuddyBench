package it.polito.mad.buddybench.activities.court

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.content.res.ColorStateList
import android.graphics.BitmapFactory
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.kizitonwose.calendar.core.WeekDay
import com.kizitonwose.calendar.core.WeekDayPosition
import com.kizitonwose.calendar.view.WeekCalendarView
import dagger.hilt.android.AndroidEntryPoint
import it.polito.mad.buddybench.R
import it.polito.mad.buddybench.classes.Profile
import it.polito.mad.buddybench.databinding.FragmentCourtBinding
import it.polito.mad.buddybench.enums.Sports
import it.polito.mad.buddybench.persistence.dto.CourtDTO
import it.polito.mad.buddybench.persistence.dto.ReservationDTO
import it.polito.mad.buddybench.persistence.dto.UserDTO
import it.polito.mad.buddybench.utils.Utils
import it.polito.mad.buddybench.viewmodels.CourtViewModel
import it.polito.mad.buddybench.viewmodels.ImageViewModel
import it.polito.mad.buddybench.viewmodels.ReservationViewModel
import org.json.JSONObject
import java.text.DecimalFormat
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter


/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */

@AndroidEntryPoint
class CourtFragment : Fragment(R.layout.fragment_court) {

    // ** NB: Autogenerated binding class containing all the elements of the .xml file
    // with an id. Example: binding.court_name_tv
    private var _binding: FragmentCourtBinding? = null

    // ** This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!
    private lateinit var user: UserDTO
    private lateinit var courtToReserve: CourtDTO
    private lateinit var selectedDate: LocalDate

    // ** Court LiveData by ViewModel
    private val courtViewModel by viewModels<CourtViewModel>()
    private val reservationViewModel by viewModels<ReservationViewModel>()

    private lateinit var profile: Profile
    private lateinit var sharedPref: SharedPreferences

    private lateinit var courtName: String
    private lateinit var sport: Sports

    // ** Edit mode (default to false)
    private var editMode = false

    private var reservationID: String? = ""
    private var reservationDate: LocalDate? = null
    private var emailReservation: String = ""
    private var equipment: Boolean? = null
    private var startTime: Int = -1
    private var endTime: Int = -1
    private lateinit var recyclerView: RecyclerView

    private lateinit var weeklyDays: MutableList<Pair<LocalDate, Boolean>>

    private lateinit var progressDialog: AlertDialog
    private var oldDate: LocalDate? = null
    private var oldStartTime: LocalTime? = null

    private val imageViewModel by viewModels<ImageViewModel> ()


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        // ** Get arguments from activity intent
        getArgs()

        selectedDate = reservationDate ?: LocalDate.now()
        _binding = FragmentCourtBinding.inflate(inflater, container, false)
        return binding.root
    }


    @SuppressLint("StringFormatInvalid", "NotifyDataSetChanged")
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        progressDialog = Utils.openProgressDialog(requireContext())


        // ** View Model
        courtName = activity?.intent?.getStringExtra("courtName") ?: "Central Park Tennis"
        sport = Sports.valueOf(
            activity?.intent?.getStringExtra("sport")?.uppercase() ?: Sports.TENNIS.name
        )
        if (editMode) {
            editMode()
        }

        weeklyDays = (0..30).map {
            val day = LocalDate.now().plusDays(it.toLong())
            if (day == selectedDate) {
                Pair(selectedDate, true)
            } else {
                Pair(day, false)
            }
        } as MutableList<Pair<LocalDate, Boolean>>


        // Setting the Manager Layout for the RecyclerView
        recyclerView = view.findViewById(R.id.time_slot_grid)

        val calendarView = view.findViewById<WeekCalendarView>(R.id.calendar)

        val calendarCallback: (LocalDate, LocalDate) -> Unit = { last, new ->
            if (last == new) {
                calendarView.notifyDayChanged(WeekDay(last, WeekDayPosition.InDate))
            } else {
                calendarView.notifyDayChanged(WeekDay(new, WeekDayPosition.InDate))
                calendarView.notifyDayChanged(WeekDay(last, WeekDayPosition.InDate))
                courtViewModel.selectDay(courtToReserve, new, reservationDate)
                selectedDate = new
            }
        }

        calendarView.dayBinder = WeeklyCalendarDayBinder(selectedDate, calendarCallback)
        calendarView.setup(weeklyDays.first().first, weeklyDays.last().first, DayOfWeek.MONDAY)
        calendarView.scrollToDate(selectedDate)

        val callback: (Pair<LocalTime, Boolean>) -> Unit = { selected ->
            courtViewModel.timeSlots.value?.find {
                it.first == selected.first
            }.let {
                it!!
                if (!it.second) {
                    val diff = courtViewModel.addSelectedTime(it.first)
                    for (i in diff)
                        recyclerView.adapter?.notifyItemChanged(i)
                } else {
                    val changedItem = courtViewModel.removeSelectedTime(it)
                    if (changedItem != null)
                        recyclerView.adapter?.notifyItemChanged(changedItem)
                }
            }
        }
        recyclerView.layoutManager = GridLayoutManager(context, 4)
        recyclerView.adapter = TimeSlotGripAdapter(
            courtViewModel.timeSlots,
            callback,
            sport
        )
        // Return to the previous activity
        binding.backButton.setOnClickListener {
            requireActivity().finish()
        }

        courtViewModel.loading.observe(this.viewLifecycleOwner){

            if(it == null || !it){

                binding.progressLayout.visibility = View.GONE

            } else{
                binding.root.findViewById<ConstraintLayout>(R.id.empty_timeslots).visibility =
                    View.GONE
                recyclerView.visibility = View.GONE
                binding.progressLayout.visibility = View.VISIBLE

            }
        }

        // Retrieve the time tables associated to a Court
        courtViewModel.getTimeTables(courtName, sport).observe(viewLifecycleOwner) {
            if (it == null) return@observe
            updateView(it.court)
            courtViewModel.getTimeSlotsAvailable(it.court, selectedDate, reservationDate)
                .observe(viewLifecycleOwner) { timeSlots ->

                    if (timeSlots == null) return@observe
                    progressDialog.dismiss()
                    if (timeSlots.isEmpty()) {
                        binding.root.findViewById<ConstraintLayout>(R.id.empty_timeslots).visibility =
                            View.VISIBLE

                        recyclerView.visibility = View.GONE
                    } else {
                        binding.root.findViewById<ConstraintLayout>(R.id.empty_timeslots).visibility =
                            View.GONE
                        recyclerView.visibility = View.VISIBLE

                    }
                    recyclerView.adapter?.notifyDataSetChanged()

                }
        }

        // ** Show reviews
        binding.seeAllReviews.setOnClickListener {
            val intent = Intent(context, ReviewsActivity::class.java)
            intent.putExtra("court_name", courtName)
            intent.putExtra("court_sport",sport.toString())
            this.startActivity(intent)
        }

        binding.seeAllReviewsArrow.setOnClickListener {
            val intent = Intent(context, ReviewsActivity::class.java)
            intent.putExtra("court_name", courtName)
            intent.putExtra("court_sport",sport.toString())
            this.startActivity(intent)
        }

        // ** Navigate to court reservation
        binding.buttonFirst.setOnClickListener {
            if (courtViewModel.selectedTimes.isEmpty()) {
                val textError = getString(R.string.error_book)
                Utils.openGeneralProblemDialog("Pick a timeslot", textError, requireContext())
            } else {
                showBottomSheetDialog()
            }

        }
        sharedPref = activity?.getSharedPreferences(
            getString(R.string.preference_file_key),
            Context.MODE_PRIVATE
        )!!
        profile =
            Profile.fromJSON(JSONObject(sharedPref.getString("profile", Profile.mockJSON())!!))
        user = profile.toUserDto()

    }

    private fun updateView(court: CourtDTO) {
        binding.courtNameTv.text = court.name.replace("Courts", "")
        binding.courtAddressTv.text = String.format(getString(R.string.court_address_card), court.address, court.location)
        binding.courtFeeTv.text = getString(R.string.court_fee, court.feeHour.toString())
        binding.feeCard.backgroundTintList = ColorStateList.valueOf(Sports.getSportColor(Sports.valueOf(court.sport), requireContext()))
        courtViewModel.getTimeTable().value?.timeTable.let {
            if (it != null) {
                Utils.getStringifyTimeTable(it).apply {
                    binding.courtOpeningHoursTv.text = first
                    binding.courtHours.text = second
                }

            }
        }
        imageViewModel.getCourtImage(court.path  + ".jpg", {
            binding.backgroundImage.setImageBitmap(BitmapFactory.decodeStream(view?.context?.assets?.open("drawable/default_image.jpg")))
        }) {
            Glide.with(this)
                .load(it)
                .into(binding.backgroundImage)
        }


        courtToReserve = court
        binding.courtPhoneNumber.text = court.phoneNumber
        binding.rating.text = DecimalFormat("#.0").format(court.rating)
        binding.ratingBar.rating = court.rating.toFloat()
        binding.nReviews.text = "(${court.nReviews})"
        binding.equipmentCost.text = String.format(
            getString(R.string.equipment_phrase),
            court.feeEquipment
        )
        if(court.facilities!!.isEmpty()) {
            binding.facility.text = getString(R.string.facility_list) + " Not Available"
        } else {
            binding.facility.text = getString(R.string.facility_list) + " " + court.facilities!!.joinToString(", ")
        }



        if(!editMode) {
            val b : Button? = view?.findViewById(R.id.cancel_button)
            b?.visibility = View.GONE
        } else {
            val b : Button? = view?.findViewById(R.id.cancel_button)
            b?.setOnClickListener {
                val oldReservation = ReservationDTO()
                oldReservation.id = reservationID!!
                oldReservation.date = oldDate!!
                oldReservation.court = court

                val deleteSheet = DialogSheetDeleteReservation(
                    oldReservation,
                    oldDate!!,
                    emailReservation
                ) { finishActivity(oldDate!!) }

                deleteSheet.show(requireActivity().supportFragmentManager, "DeleteSheet")
            }
        }
        if(editMode)
            binding.parentScrollView.post {
                binding.parentScrollView.smoothScrollBy(0, Int.MAX_VALUE)
            }
    }

    @SuppressLint("UseSwitchCompatOrMaterialCode")
    private fun showBottomSheetDialog() {
        val editConfirmDialogSheet = EditConfirmDialogSheet(
            editMode,
            courtViewModel,
            reservationID,
            courtToReserve,
            equipment,
            reservationViewModel,
            user,
            selectedDate,
            oldDate,
            oldStartTime
        ) {
            finishActivity(selectedDate)
        }
        editConfirmDialogSheet.show(parentFragmentManager, "editConfirmDialogSheet")
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }


    private fun editMode() {
        courtViewModel.setReservationDate(reservationDate!!)
        val b = view?.findViewById<Button>(R.id.button_first)
        b?.text = "Edit Book"
        courtViewModel.startTime = LocalTime.of(startTime,0)
        courtViewModel.endTime = LocalTime.of(endTime,0)
        oldStartTime =  LocalTime.of(startTime,0)
        oldDate = selectedDate
    }

    private fun getArgs() {
        // ** Check intent for arguments
        editMode = activity?.intent?.getBooleanExtra("edit", false) ?: false
        activity?.intent?.getStringExtra("date").let {
            if (it != null)
                reservationDate = LocalDate.parse(it, DateTimeFormatter.ISO_LOCAL_DATE)
        }
        reservationID =  activity?.intent?.getStringExtra("id") ?: ""
        emailReservation = activity?.intent?.getStringExtra("email") ?: ""
        startTime = activity?.intent?.getIntExtra("startTime", -1) ?: -1
        endTime = activity?.intent?.getIntExtra("endTime", -1) ?: -1
        equipment = activity?.intent?.getBooleanExtra("equipment", false) ?: false
    }

    private fun finishActivity(date: LocalDate) {
        requireActivity().intent.putExtra("date", date.format(DateTimeFormatter.ISO_LOCAL_DATE))
        requireActivity().setResult(Activity.RESULT_OK, requireActivity().intent)
        requireActivity().finish()
    }

}