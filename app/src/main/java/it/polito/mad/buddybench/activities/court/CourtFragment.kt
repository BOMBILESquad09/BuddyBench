package it.polito.mad.buddybench.activities.court

import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.ViewGroup.LayoutParams
import android.view.ViewGroup.MarginLayoutParams
import android.widget.Button
import android.widget.Switch
import android.widget.TextView
import androidx.cardview.widget.CardView
import androidx.compose.ui.res.integerArrayResource
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.google.android.material.bottomsheet.BottomSheetDialog
import dagger.hilt.android.AndroidEntryPoint
import it.polito.mad.buddybench.R
import it.polito.mad.buddybench.activities.HomeActivity
import it.polito.mad.buddybench.classes.Profile
import it.polito.mad.buddybench.databinding.FragmentCourtBinding
import it.polito.mad.buddybench.dto.CourtDTO
import it.polito.mad.buddybench.dto.ReservationDTO
import it.polito.mad.buddybench.dto.UserDTO
import it.polito.mad.buddybench.enums.Sports
import it.polito.mad.buddybench.utils.Utils
import it.polito.mad.buddybench.viewmodels.CourtViewModel
import it.polito.mad.buddybench.viewmodels.ReservationViewModel
import org.json.JSONObject
import java.io.FileNotFoundException
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter


/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */

@AndroidEntryPoint
class CourtFragment() : Fragment(R.layout.fragment_court) {

    // ** NB: Autogenerated binding class containing all the elements of the .xml file
    // with an id. Example: binding.court_name_tv
    private var _binding: FragmentCourtBinding? = null

    // ** This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!
    private lateinit var user: UserDTO
    private lateinit var courtToReserve: CourtDTO

    // ** Court LiveData by ViewModel
    private val courtViewModel by viewModels<CourtViewModel>()
    private val reservationViewModel by viewModels<ReservationViewModel>()

    private lateinit var profile: Profile
    private lateinit var sharedPref: SharedPreferences


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCourtBinding.inflate(inflater, container, false)
        return binding.root
    }



    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // ** View Model
        val courtName = activity?.intent?.getStringExtra("courtName") ?: "Central Park Tennis"
        val sport = Sports.valueOf(activity?.intent?.getStringExtra("sport")?.uppercase() ?: Sports.TENNIS.name)

        // TODO: Turn Back on the activity HomeActivity
        binding.backButton.setOnClickListener {
            activity?.finish()
        }

        courtViewModel.getTimeTables(courtName, sport)
            .observe(viewLifecycleOwner) {
                println(it.timeTable)
            updateView(it.court)
        }

        // ** DateTime Pickers
        courtViewModel.selectedDay.observe(viewLifecycleOwner) { selected ->
            binding.daysScrollView.removeAllViews()
            binding.timeScrollView.removeAllViews()
            val availableTimeSlots = courtViewModel.getTimeSlotsAvailable(
                courtToReserve,
                courtViewModel.selectedDay.value!!
            )


            courtViewModel.clearSelectedTime()
            availableTimeSlots.map { renderTimeItem(it, courtViewModel.selectedTimes.value!!)}

            if(availableTimeSlots.isEmpty()) {
                binding.timeScrollView.removeAllViews()
                val timeSlotsNotAvailable = layoutInflater.inflate(R.layout.time_slots_not_available, binding.timeScrollView, false)
                binding.timeScrollView.addView(timeSlotsNotAvailable)
            }

            courtViewModel.selectedTimes.observe(viewLifecycleOwner) {
                binding.buttonFirst.isEnabled = availableTimeSlots.isNotEmpty()
                        && courtViewModel.timeSlots.value!!.any { time -> it.contains(time) }
            }

            courtViewModel.days.map { renderDayItem(it, selected) }
            courtViewModel.openingAndClosingTimeForCourt(selected.dayOfWeek)

        }


        courtViewModel.selectedTimes.observe(viewLifecycleOwner) { selected ->
            binding.timeScrollView.removeAllViews()
            println(selected.size)
            courtViewModel.getTimeSlotsAvailable(
                courtToReserve,
                courtViewModel.selectedDay.value!!
            ).map { renderTimeItem(it, selected) }
        }

        courtViewModel.timeSlots.observe(viewLifecycleOwner) {

            if(it.isEmpty()) {
                binding.timeScrollView.removeAllViews()
                val noTimeSlotsAvailable = layoutInflater.inflate(R.layout.time_slots_not_available, binding.timeScrollView, false)
                binding.timeScrollView.addView(noTimeSlotsAvailable)
            }
        }

        // ** Navigate to court reservation
        binding.buttonFirst.setOnClickListener {
            showBottomSheetDialog()
        }
        sharedPref = activity?.getSharedPreferences(getString(R.string.preference_file_key), Context.MODE_PRIVATE)!!
        profile = Profile.fromJSON(JSONObject(sharedPref.getString("profile", Profile.mockJSON())!!))
        user = profile.toUserDto()
    }

    private fun updateView(court: CourtDTO) {
        binding.courtNameTv.text = court.name.replace("Courts", "")
        binding.courtAddressTv.text = court.address + ", " + court.location
        binding.courtFeeTv.text = getString(R.string.court_fee, court.feeHour.toString())
        courtViewModel.getTimeTable().value?.timeTable.let{
            if (it!=null) {
                binding.courtOpeningHoursTv.text = Utils.getStringifyTimeTable(it)
            }
        }

        val bitmap = try {
            BitmapFactory.decodeStream(view?.context?.assets?.open("courtImages/" + court.path + ".jpg"))
        } catch (_: FileNotFoundException) {
            BitmapFactory.decodeStream(view?.context?.assets?.open("courtImages/default_image.jpg"))
        }
        courtToReserve = court
        binding.backgroundImage.setImageBitmap(bitmap)
        binding.rating.text = court.rating.toString()
        binding.ratingBar.rating = court.rating.toFloat()
        binding.nReviews.text = "(${court.nReviews})"
    }

    private fun renderDayItem(day: LocalDate, selected: LocalDate) {
        val dayScrollItem =
            layoutInflater.inflate(R.layout.datepicker_scroll_item, binding.daysScrollView, false)
        val dayTv: TextView = dayScrollItem.findViewById(R.id.day_tv)
        val dayOfMonthTv: TextView = dayScrollItem.findViewById(R.id.day_of_month_tv)
        val monthTv: TextView = dayScrollItem.findViewById(R.id.month_tv)

        dayTv.text = Utils.capitalize(day.dayOfWeek.name.subSequence(0, 3).toString())
        dayOfMonthTv.text = day.dayOfMonth.toString()
        monthTv.text = Utils.capitalize(day.month.name.subSequence(0, 3).toString())

        // ** Selected day
        if (day == selected) {
            val primaryColor =
                ContextCompat.getColor(requireContext(), R.color.md_theme_light_primary)
            val whiteColor =
                ContextCompat.getColor(requireContext(), R.color.md_theme_light_background)
            dayOfMonthTv.background.setTint(primaryColor)
            dayOfMonthTv.setTextColor(whiteColor)
        }

        // ** Last item no margin at the end
        if (day == courtViewModel.days.last()) {
            val noMarginParams =
                MarginLayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
            noMarginParams.marginEnd = 0
            dayScrollItem.layoutParams = noMarginParams
        }

        courtViewModel.clearSelectedTime()

        // ** OnClick Listener
        dayScrollItem.setOnClickListener { courtViewModel.selectDay(day) }

        binding.daysScrollView.addView(dayScrollItem)
    }


    private fun renderTimeItem(time: LocalTime, selected: MutableList<LocalTime>) {
        val timeScrollItem = layoutInflater.inflate(
            R.layout.datepicker_time_scroll_item,
            binding.timeScrollView,
            false
        )
        val timeSlotCard: CardView = timeScrollItem.findViewById(R.id.time_slot_card)
        val timeSlotTv: TextView = timeScrollItem.findViewById(R.id.time_slot_tv)

        // ** Text is (time --- time + 1)
        val timeSlotText =
            time.format(DateTimeFormatter.ofPattern("HH:mm")) + " - " + time.plusHours(1).format(
                DateTimeFormatter.ofPattern("HH:mm")
            )
        timeSlotTv.text = timeSlotText

        // ** Selected time
        if (selected.contains(time)) {
            val primaryColor =
                ContextCompat.getColor(requireContext(), R.color.md_theme_light_primary)
            val whiteColor =
                ContextCompat.getColor(requireContext(), R.color.md_theme_light_background)
            timeSlotCard.background.setTint(primaryColor)
            timeSlotTv.setTextColor(whiteColor)
        }

        // ** Last item no margin at the end
        if (time == courtViewModel.timeSlots.value?.last()) {
            val noMarginParams =
                MarginLayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)
            noMarginParams.marginEnd = 0
            timeScrollItem.layoutParams = noMarginParams
        }

        timeSlotCard.setOnClickListener {
            if(!selected.contains(time))
                courtViewModel.addSelectedTime(time)
            else
                courtViewModel.removeSelectedTime(time)
        }

        binding.timeScrollView.addView(timeScrollItem)
    }

    private fun showBottomSheetDialog() {
        val bottomSheetDialog = BottomSheetDialog(requireContext())
        bottomSheetDialog.setContentView(R.layout.bottom_sheet_dialog_court_confirm)
        val courtName = bottomSheetDialog.findViewById<TextView>(R.id.court_name_confirm_tv)
        courtName?.text = courtViewModel.court.value?.name
        val courtAddress = bottomSheetDialog.findViewById<TextView>(R.id.court_address_confirm_tv)
        courtAddress?.text = courtViewModel.court.value?.address +  ", " + courtViewModel.court.value?.location
        val dateSelected = bottomSheetDialog.findViewById<TextView>(R.id.dateSelected)
        dateSelected?.text = courtViewModel.selectedDay.value!!.format(
            DateTimeFormatter.ofPattern("EEEE, d MMMM y")
        )
        val confirmButton = bottomSheetDialog.findViewById<Button>(R.id.confirmPrenotation)
        courtViewModel.getTimeSlotsAvailable(
            courtToReserve,
            courtViewModel.selectedDay.value!!
        )

        val switch = bottomSheetDialog.findViewById<Switch>(R.id.switch_equipment)
        val textEquipment = bottomSheetDialog.findViewById<TextView>(R.id.equipment_view)
        switch?.setOnCheckedChangeListener { buttonView, isChecked ->
            if(isChecked) {
                textEquipment?.visibility = View.VISIBLE
                textEquipment?.text = getString(R.string.equipment) + " ${courtToReserve.feeEquipment}$/h"
            } else {
                textEquipment?.visibility = View.GONE
            }
        }

        confirmButton?.setOnClickListener {

            for(time in courtViewModel.selectedTimes.value!!) {
                val reservation = ReservationDTO(
                    userOrganizer = user,
                    court = courtToReserve,
                    date = courtViewModel.selectedDay.value!!,
                    startTime = time,
                    endTime = time.plusHours(1),
                    equipment = switch!!.isChecked
                )
                reservationViewModel.saveReservation(
                    reservation
                )
            }

            _binding?.timeScrollView?.removeAllViews()
            val availableTimeSlots = courtViewModel.getTimeSlotsAvailable(
                courtToReserve,
                courtViewModel.selectedDay.value!!
            )

            availableTimeSlots.map { renderTimeItem(it, courtViewModel.selectedTimes.value!!)}

            bottomSheetDialog.dismiss()

        }

        val timeSelected = bottomSheetDialog.findViewById<TextView>(R.id.timeSelected)
        // TODO: Visualize all the prenotation inside the dialog (for the moment just the first)
        val hourSelected = courtViewModel.selectedTimes.value!![0]
        val formatter = DateTimeFormatter.ofPattern("HH:mm")
        timeSelected?.text = hourSelected.format(formatter) + " - " + hourSelected.plusHours(1).format(formatter)

        bottomSheetDialog.show()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}